#+TITLE: API-driven generation of\\ well-typed terms\\ \vspace{1cm} \small Master's thesis presentation\\ in Computer Science
#+AUTHOR: David Sp√•ngberg
#+EMAIL: david@tunna.org
#+OPTIONS: toc:nil num:nil ::t @:t f:t
#+startup: beamer
#+LATEX_CLASS: beamer
#+LATEX_HEADER: \usepackage{minted, tikz, amsmath, alltt}
#+LATEX_HEADER: \usetikzlibrary{shapes,arrows,calc,positioning}


#+BEGIN_LATEX
\newminted{haskell}{frame=leftline}
\newcommand{\ri}{\rightarrow}
\newcommand{\doubcolon}{::}
\newcommand{\myalert}[2]{\alert<#1>{#2}}
\newcommand{\myalt}[3]{\alt<#1>{#2}{#3}}
\newcommand{\myonly}[2]{\only<#1>{#2}}

\setbeamercovered{transparent=50}

\tikzstyle{ctor}=[rectangle,draw=black]
\tikzstyle{undec}=[rectangle,draw=black,dotted]
\tikzstyle{lam}=[ellipse,draw=black]

\tikzset{myblock/.style={rectangle,color=blue,fill=blue!10,text=black,draw, text width=#1,align=flush left, anchor=north west}}
#+END_LATEX

* Software Testing
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \label{intro}

  \setbeamercovered{invisible}

  \pause

  - Unit testing

    \begin{haskellcode}
    test_myInsert = myInsert 4 [1,3,7] == [1,3,4,7]
    \end{haskellcode}
    \pause

  - Requires several more tests!
  - This is just one function.. \pause
  - \Large Seems boring! \normalsize Lets skip it \pause

  \bigskip

  - \Large Important! \normalsize We have to do it :-(
    - Estimated $312 billion (2012)
    - 50% time spent on finding and fixing bugs

* Software Testing
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  - Use QuickCheck!
  - Specify properties for functions instead
  - Better coverage for same (or less) amount of code
  - Random test data generated automatically. Nice! \pause

  \begin{haskellcode}
  prop_myInsert :: Int -> [Int] -> Bool
  prop_myInsert x xs = isSorted (myInsert x (sort xs))
  \end{haskellcode}

  \begin{alltt}
  \(\lambda\)> quickCheck prop_myInsert
  +++ OK, passed 100 tests.
  \end{alltt}

* Arbitrary what?
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{haskellcode}
  prop_apa :: MyCleverType -> Bool
  prop_apa c = my_clever_property (apa c)
  \end{haskellcode}

  \pause

  #+BEGIN_LATEX
  \begin{alltt}
  \(\lambda\)> quickCheck prop_apa \( \pause \)
  \(\myalert{3-}{\text{ERROR}}\)
    \(\myalert{3-}{\text{No instance for (Arbitrary MyCleverType)}}\)
  \end{alltt}
  #+END_LATEX

  \pause

  - Now need to create generator instead! (Arbitrary)
  - Sometimes easy, sometimes hard \pause
  - Hard when satisfying some property
    - Well-"typedness"

* Related work
  - Random lambda terms (Pa\l{}ka)
  - MagicHaskeller (Katayama)

* Introducing QuickGen
  - Library for creating custom generators from an API
  - Polymorphism/higher order functions
  - Easy to specify functions and values in API
  - Easy to create generators for a type (functions!)
  - Motivation: EDSL $\approx$ generator "for free"!

* How to start?
  1. Specify list of functions and values to use
     - Set of \myalert{1,5}{Constructors} in an \myalert{1,5}{API}
       (Language) \pause
  2. Specify a \myalert{2,5}{goal type} \pause
  3. Random expression of correct type constructed using API \pause
  4. Thats it!

* A problem appears
  \label{problem1}

  Example:

  - Generate $[Double]$ \pause
  - $map \doubcolon (a \ri \myalert{5}{b}) \ri [a] \ri \myalert{3}{[\myalert{5}{b}]}$ \pause
  - Match on \myalert{3}{return type} of $map$ \pause
  - $Match([Double], [b]) \Longrightarrow$ "$b$ must be $Double$"
    - New type for $map \doubcolon (a \ri \myalert{5}{Double}) \ri [a] \ri [\myalert{5}{Double}]$

* Decisions decisions
  New type for $map \doubcolon (a \ri Double) \ri [a] \ri [Double]$ \pause

  - Need to generate $(a \ri Double)$ and $[a]$ for some type $a$ \pause
  - Problem: What type to use for $a$? Can be anything! \pause
    - Always select Int?
    - Generate random type?
    - Other? \pause
  - Solution: \myalert{5-}{$a$} is \myalert{5-}{undecided} $\Leftrightarrow~\myalert{5-}{?a}$
    - Doing as little as possible. Nice! \pause
  - However, need to keep track of \myalert{6}{guesses} (if $?a$
    specialized later)

* A problem appears
  \label{problem2}

  Example:

  - Generate $[Double]$
  - $id \doubcolon a \ri a$ \pause

   \[ \myalt{2-}{id~\myalt{3-}{(id}{\myonly{2}{?}}~\myalt{4-}{(id}{\myonly{3}{?}}~\myalt{5-}{(id}{\myonly{4}{?}}~\myalt{6-}{(id~?}{\myonly{5}{?}}}{}~\myonly{7}{\ldots} \]

* Limiting uses

  - Solution: Limit \myalert{1}{uses} of each constructor with \myalert{1}{function type}
    - $Uses(a \ri a) = 5$
    - $Uses(Int) = \infty$
  - Store uses together with constructor
  - Decrease by one when used

* Generating $[Double]$
  - \alert{API}

  |   | Constructor | Type                        |
  |---+-------------+-----------------------------|
  | / |         <r> | <                           |
  |   |       $map$ | $(a \ri b) \ri [a] \ri [b]$ |
  |   |   $fromInt$ | $Int \ri Double$            |
  |   |        $ns$ | $[Int]$                     |

* Generating $[Double]$
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \label{generate-box}

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {\phantom{$map$}};
  \draw (init) -- (map);
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ \alert{(using boxes!)}
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {\phantom{$map$}};
  \draw (init) -- (map);
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ (using boxes!)
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {\myalt{6}{\alert{$map$}}{\phantom{$map$}}};
  \draw (init) -- (map);
  \node [right] at (init.east) {$\leftarrow$ \myalert{1-2}{Goal type}}; \pause
  \node at (0,-5.2) {\myalert{2}{Match} the \myalert{2}{goal type} with \myalert{2,5}{return type} of \myalert{2}{Constructors}}; \pause

  \node [right,xshift=0.35cm] at (map.east) {$\leftarrow$ \myalert{3-4}{Fill in}}; \pause
  \node at (0,-5.8) {\myalert{4}{Fill in} blanks with random matching Constructor!};

  \node<5> [myblock=4.9cm, anchor=south west] at (-5.5,-4) {$map :: (a \ri b) \ri [a] \ri \alert{[b]}$\\$fromInt :: Int \ri \alert{Double}$\\$ns :: \alert{[Int]}$};
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ (using boxes!)
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {$map$};
  \draw (init) -- (map);

  \node<2-> at (0,-5.2) {Recall type of $map :: \myalert{2}{(a \ri b)} \ri \myalert{2}{[a]} \ri [b]$};
  \node<3-> at (0,-5.8) {\alert{$b$} must be \alert{$Double$}, \alert{$a$} can be anything, i.e \alert{undecided}!};
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ (using boxes!)
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {$map$};
  \draw (init) -- (map);

    \node [lam] (x) at (-4,-2) {$\lambda~(x :: ?a)$};
    \draw (map.south west) -- (x.north) node [midway,yshift=15pt,xshift=-3pt] {$?a \ri Double$};

      \node [ctor] (x2) at ($ (x) -(0,1.65) $) {\phantom{fromInt}};
      \draw (x) -- (x2) node [midway,right] {$Double$};

    \node [ctor] (ns) at (3,-2) {\myalt{3}{\alert{ns}}{\phantom{ns}}};
    \node [right] (nsty) at (ns.east) {\myalt{3}{\alert{$[Int]$}}{}};
    \draw (map.south east) -- (ns.north) node [midway,yshift=15pt] {$[?a]$};

    \node at (0,-5.2) {Recall type of $map :: (a \ri b) \ri [a] \ri [b]$};
    \node at (0,-5.8) {$b$ must be $Double$, $a$ can be anything, i.e undecided!};

  \node<2> [myblock=4.9cm, anchor=south west] at (-5.5,-4) {$map :: (a \ri b) \ri [a] \ri [b]$\\$fromInt :: Int \ri Double$\\$ns :: [Int]$};
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ (using boxes!)
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {$map$};
  \draw (init) -- (map);

    \node [lam] (x) at (-4,-2) {$\lambda~(x ::?a)$};
    \draw (map.south west) -- (x.north) node [midway,yshift=15pt,xshift=-3pt] {$?a \ri Double$};

      \node [ctor] (x2) at ($ (x) -(0,1.65) $) {\phantom{fromInt}};
      \draw (x) -- (x2) node [midway,right] {$Double$};

    \node [ctor] (ns) at (3,-2) {ns};
    \node [right] (nsty) at (ns.east) {$[Int]$};
    \draw (map.south east) -- (ns.north) node [midway,yshift=15pt] (g2ty) {$[?a]$};
    \draw [<->,bend right=25,dotted,draw=blue] (nsty.north) to (g2ty.east);

      \node [undec] (u1) at ($ (ns) -(0,1.5) $) {$?a \mapsto Int$};
      \draw [dotted,draw=blue] (ns) -- (u1);

  \node at (0,-5.2) {$Match([?a], [Int])$ introduced \alert{guess}}; \pause
  \node at (0,-5.8) {Need to update $?a$ everywhere!};
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ (using boxes!)
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {$map$};
  \draw (init) -- (map);

    \node [lam] (x) at (-4,-2) {$\lambda~(x :: \textcolor{red}{Int})$};
    \draw (map.south west) -- (x.north) node [midway,yshift=15pt,xshift=-3pt] {$\textcolor{red}{Int} \ri Double$};

      \node [ctor] (x2) at ($ (x) -(0,1.65) $) {\phantom{fromInt}};
      \draw (x) -- (x2) node [midway,right] {$Double$};

    \node [ctor] (ns) at (3,-2) {ns};
    \node [right] (nsty) at (ns.east) {$[Int]$};
    \draw (map.south east) -- (ns.north) node [midway,yshift=15pt] (g2ty) {$[\textcolor{red}{Int}]$};
    \draw [<->,bend right=25,dotted,draw=blue] (nsty.north) to (g2ty.east);

      \node [undec] (u1) at ($ (ns) -(0,1.5) $) {$?a \mapsto Int$};
      \draw [dotted,draw=blue] (ns) -- (u1);

  \node at (0,-5.2) {$Match([?a], [Int])$ introduced \alert{guess}};
  \node at (0,-5.8) {Need to update $?a$ everywhere!};
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ (using boxes!)
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {$map$};
  \draw (init) -- (map);

    \node [lam] (x) at (-4,-2) {$\lambda~(\myalert{2-3}{x :: Int})$};
    \draw (map.south west) -- (x.north) node [midway,yshift=15pt,xshift=-3pt] {$Int \ri Double$};

      \node [ctor] (x2) at ($ (x) -(0,1.65) $) {\myalt{4}{fromInt}{\phantom{fromInt}}};
      \node [right] at (x2.east) {\myalt{4}{$Int \ri Double$}{\phantom{$Int \ri Double$}}};
      \draw (x) -- (x2) node [midway,right] {$Double$};

    \node [ctor] (ns) at (3,-2) {ns};
    \node [right] (nsty) at (ns.east) {$[Int]$};
    \draw (map.south east) -- (ns.north) node [midway,yshift=15pt] (g2ty) {$[Int]$};
    \draw [<->,bend right=25,dotted,draw=blue] (nsty.north) to (g2ty.east);

      \node [undec] (u1) at ($ (ns) -(0,1.5) $) {$?a \mapsto Int$};
      \draw [dotted,draw=blue] (ns) -- (u1);

  \node<2-3> [myblock=4.9cm, anchor=north east] at (5.5,1) {$map :: (a \ri b) \ri [a] \ri [b]$\\$fromInt :: Int \ri Double$\\$ns :: [Int]$\\\alert{$x :: Int$}};
  \node<3> at (0,-5.2) {API \alert{extended} by argument to lambda};
  \end{tikzpicture}
  \end{figure}

* Generating $[Double]$ (using boxes!)
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \label{generate-end}

  \begin{figure}
  \begin{tikzpicture}[->, >=stealth', shorten >=1pt, thick]
  \draw [draw=none] (-5.5,1) rectangle (5.5,-6.5);
  \node (init) at (0,0.5) {$[Double]$};
  \node [ctor] (map) at ($ (init) -(0,1) $) {$map$};
  \draw (init) -- (map);

    \node [lam] (x) at (-4,-2) {$\lambda~(x :: Int)$};
    \draw (map.south west) -- (x.north) node [midway,yshift=15pt,xshift=-3pt] {$Int \ri Double$};

      \node [ctor] (x2) at ($ (x) -(0,1.65) $) {fromInt};
      \node [right] at (x2.east) {$Int \ri Double$};
      \draw (x) -- (x2) node [midway,right] {$Double$};

        \node [ctor] (x3) at ($ (x2) - (0,1.65) $) {\myalt{2-}{x}{\phantom{x}}};
        \draw (x2) -- (x3) node [midway,right] {$Int$};

    \node [ctor] (ns) at (3,-2) {ns};
    \node [right] (nsty) at (ns.east) {$[Int]$};
    \draw (map.south east) -- (ns.north) node [midway,yshift=15pt] (g2ty) {$[Int]$};
    \draw [<->,bend right=25,dotted,draw=blue] (nsty.north) to (g2ty.east);

      \node [undec] (u1) at ($ (ns) -(0,1.5) $) {$?a \mapsto Int$};
      \draw [dotted,draw=blue] (ns) -- (u1);

  \node<3> at (1,-5.4) {Final expression: $\alert{map~(\lambda~x \ri fromInt~x)~ns}$};
  \end{tikzpicture}
  \end{figure}

* Algorithm
  \label{generate-code}

  Given a goal type $\mathbf{t}$ \pause

  1. $\mathbf{t} = t_1 \ri \ldots \ri t_n \ri \mathbf{t'}$ (n can be 0) \pause
     - Generate unique variable names $x_i$
     - Add all $(x_i, t_i, Uses(t_i))$ to API \pause
  2. Select constructor $\mathbf{C}$ /matching/ $\mathbf{t'}$ (with uses $>0$) \pause
     - *Fail* if no constructor found
     - Introduce guesses if needed
     - $\mathbf{C} \doubcolon s_1 \ri \ldots \ri s_m \ri \mathbf{t'}$ (m can be 0) \pause
  3. Generate each subgoal $e_i :: s_i$ by calling 1. \pause
     - If any recursive call failed
       - Goto 2. and retry (max 3 times else *Fail*) \pause
  4. Return $\mathbf{C}~e_1~\ldots~e_m :: \mathbf{t'}$

* Did somebody say library?
  We need \pause

  - Language definition (API / list of constructors) \pause
  - Goal type

* Example usage: QuickGen test suite

* Example usage: QuickGen test suite
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{haskellcode}
  lang :: Language
  lang = $(defineLanguage
    [| ( map        :: (a -> b) -> [a] -> [b]
       , foldr      :: (a -> b -> b) -> b -> [a] -> b
       , id         :: a -> a
       , const      :: a -> b -> a
       , cons       :: a -> [a] -> [a]
       , nil        :: [a]
       , app        :: (a -> b) -> a -> b
       , succ       :: Int -> Int
       , succ       :: Double -> Double
       , arbiInt    :: Int
       , arbiDouble :: Double
       ) |])
  \end{haskellcode}

* Example usage: QuickGen test suite
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:
   \begin{haskellcode}
   lang :: Language
   lang = $(defineLanguage
     [| ( map
        , foldr
        , id
        , const
        , cons
        , nil
        , app
        , succ       :: Int -> Int
        , succ       :: Double -> Double
        , arbiInt
        , arbiDouble
        ) |])
   \end{haskellcode}

* Example usage: QuickGen test suite
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:
   \begin{haskellcode}
   lang :: Language
   lang = $(defineLanguage
     [| ( map        :: (a -> b) -> [a] -> [b]
        , foldr      :: (a -> b -> b) -> b -> [a] -> b
        , id         :: a -> a
        , const      :: a -> b -> a
        , cons       :: a -> [a] -> [a]
        , nil        :: [a]
        , app        :: (a -> b) -> a -> b
        , succ       :: Int -> Int
        , succ       :: Double -> Double
        , arbiInt    :: Int
        , arbiDouble :: Double
        ) |])
   \end{haskellcode}

* Example usage: QuickGen test suite
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:
   \begin{haskellcode}
   lang :: Language
   lang = $(defineLanguage -- TH library function
     [| ( map        :: (a -> b) -> [a] -> [b]
        , foldr      :: (a -> b -> b) -> b -> [a] -> b
        , id         :: a -> a
        , const      :: a -> b -> a
        , cons       :: a -> [a] -> [a]
        , nil        :: [a]
        , app        :: (a -> b) -> a -> b
        , succ       :: Int -> Int
        , succ       :: Double -> Double
        , arbiInt    :: Int
        , arbiDouble :: Double
        ) |])
   \end{haskellcode}

* Example usage: QuickGen test suite
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{haskellcode}
  gen :: Int -> Maybe Exp
  gen seed = generate lang ty seed
    where
      ty = $(getType [t| a -> [a] |])
  \end{haskellcode}

  \vspace{2.015cm}

* Example usage: QuickGen test suite
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{haskellcode}
  gen :: Int -> Maybe Exp
  gen seed = generate lang ty seed
    where
      ty = $(getType [t| a -> [a] |])

  main = do
    seeds <- randoms <$> newStdGen
    mapM_ (print . gen) (take 50 seeds)
  \end{haskellcode}

* Demo

  ...

* Where are my values!
  \pause
  - Above example only gives strings, want real executable values! \pause
  - Currently relies on GHC API
    - Not really nice..
    - Except that expressions type checked (done in test suite)

* Results
  \label{results}

  - Generator library
  - Tested on Feldspar
    - Small API, polymorphism/higher order
    - Found artificially introduced bug \pause
  - Tested on Copilot
    - Larger API, polymorphism
    - Similar to Copilot hand-made generator
    - Visual inspection
    - 25-30% size of original generator \pause
  - No \myalert{3}{Type Classes}

* Future work
  \label{future}

  - \textbf{Type classes}
  - Better (user friendly) way to get values from generator
  - More expressions in API definitions
    - $(:)$ is better than $cons$

* Conclusions
  \label{conclusions}

  - Usable for simple regression testing (GHC API..)
  - Needs more features (usability)

* Summary
  - \hyperlink{intro}{Introduction}
  - \hyperlink{problem1}{Problem: Undecided variables}
  - \hyperlink{problem2}{Problem: Termination / Uses}
  - \hyperlink{generate-box}{Generate with boxes} \hyperlink{generate-end}{[2]}
  - \hyperlink{generate-code}{Generate pseudo code}
  - Demo
  - \hyperlink{results}{Results}
  - \hyperlink{future}{Future Work}
  - \hyperlink{conclusions}{Conclusions}
